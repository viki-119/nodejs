/************************************************************************************************************/
回调函数写法1：
作用：回调函数赋予程序员这样一种能力，让自己编写的代码能够跳出正常的程序控制流，适应具体的运行环境在正确的时间执行。
/************************************************************************************************************/
function learn(something){
  console.log(something)
}
function we(callback,something){
  something+=' is cool'
  callback(something)
}
we(learn,'nodeJs')

/************************************************************************************************************/
回调函数写法2匿名函数：
/************************************************************************************************************/
function we(callback,something){
  something+=' is cool'
  callback(something)
}
we(function(something){
  console.log(something)
},' everyone think nodeJs')

/************************************************************************************************************/
回调函数法3异步回调：
/************************************************************************************************************/
var c=0
function printIt(){
	console.log(c)
}
function plus(callback){
	setTimeout(function(){
		c+=1
		callback()
	},1000)
}
plus(printIt)

/************************************************************************************************************/
添加点击事件：
/************************************************************************************************************/
function clickIt(){
	window.alert('button is clicked')
}
var button=document.getElementById('#button')
button.addEventListener('click',clickIt)

/************************************************************************************************************/
上下文1
/************************************************************************************************************/
function Pet(words){
	this.words=words
	this.speak=function(){
		console.log(this.words)
		console.log(this===cat)
		console.log(this)
	}
}
var cat=new Pet('miao')
cat.speak()

/************************************************************************************************************/
上下文2  nodejs中的call与apply
/************************************************************************************************************/
var pet={
	words:'...',
	speak:function(say){
		console.log(say+''+this.words)
	}
}
var dog={
	words:'Wang'
}
pet.speak('pet.speak')
pet.speak.call(dog,'speak')

/************************************************************************************************************/
上下文3  nodejs中的call与apply  
/************************************************************************************************************/
function Pet(words){
	this.words=words
	this.speak=function(){
		console.log(this.words)
	}
}
function Dog(words){
	Pet.call(this,words)
	//Pet.apply(this,arguments)
}
var dog=new Dog('wang')
dog.speak()
